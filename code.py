import logging
import requests
import base64
import io
import asyncio
import time
import datetime
import json
import os
import aiohttp
from collections import defaultdict
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ApplicationBuilder
)
from telegram.constants import ParseMode, ChatAction

TELEGRAM_BOT_TOKEN = "7639285272:AAH-vhuRyoVDMNjqyvkDgfsZw7_d5GEc77Q" # <<< –í–ê–® –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ù–´–ô TELEGRAM TOKEN
LANGDOCK_API_KEY = "sk-OP8Ybcki6KOxtIcWZCFmrdNGizFUSiMLIu7sncfB0Pzqi1mfSFVhlz1x-GwBRZ1aPCWwglAY2V5bjNsA4c_Zfw" # <<< –í–ê–® –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ù–´–ô LANGDOCK KEY

LANGDOCK_API_URL = "https://api.langdock.com/anthropic/eu/v1/messages"
CLAUDE_MODEL = "claude-3-7-sonnet-20250219"
MAX_MESSAGE_LENGTH = 4096
API_TIMEOUT = 180 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 8199808170
WEEKLY_REQUEST_LIMIT = 10
USER_DATA = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = "user_data.json"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –°–µ–º–∞—Ñ–æ—Ä—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
API_SEMAPHORE = asyncio.Semaphore(5)  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
USER_LOCKS = defaultdict(asyncio.Lock)  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
PROCESSING_USERS = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–ø—Ä–æ—Å—ã –∫–æ—Ç–æ—Ä—ã—Ö –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ API
INITIAL_API_BALANCE = 100.0  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –µ–≤—Ä–æ
COST_PER_QUERY = 0.015  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –µ–≤—Ä–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞)
API_USAGE = {
    'total_tokens': 0,
    'total_cost': 0.0,
    'queries_count': 0,
    'last_update': time.time()
}
API_USAGE_FILE = "api_usage.json"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è LangDock API —É—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
LANGDOCK_BILLING_API_URL = "https://api.langdock.com/billing/v1/usage"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –±–∏–ª–ª–∏–Ω–≥–∞

logging.basicConfig(
    format="[%(asctime)s] %(levelname)s: %(message)s",
    level=logging.INFO,
    datefmt="%H:%M:%S"
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger("–¢–µ–ª–µ–≥—Ä–∞–º–ë–æ—Ç")

def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    try:
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as file:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–ª—é—á–∏ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è json
            data_to_save = {str(k): v for k, v in USER_DATA.items()}
            json.dump(data_to_save, file, ensure_ascii=False, indent=2)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {USER_DATA_FILE}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    global USER_DATA
    try:
        if os.path.exists(USER_DATA_FILE):
            with open(USER_DATA_FILE, 'r', encoding='utf-8') as file:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∏—Å–ª–∞
                loaded_data = json.load(file)
                USER_DATA = {int(k): v for k, v in loaded_data.items()}
            logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {USER_DATA_FILE}")
        else:
            logger.info(f"–§–∞–π–ª {USER_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        USER_DATA = {}

def save_api_usage():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API –≤ —Ñ–∞–π–ª."""
    try:
        with open(API_USAGE_FILE, 'w', encoding='utf-8') as file:
            json.dump(API_USAGE, file, ensure_ascii=False, indent=2)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {API_USAGE_FILE}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API: {e}")

def load_api_usage():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API –∏–∑ —Ñ–∞–π–ª–∞."""
    global API_USAGE
    try:
        if os.path.exists(API_USAGE_FILE):
            with open(API_USAGE_FILE, 'r', encoding='utf-8') as file:
                loaded_data = json.load(file)
                
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                API_USAGE = {
                    'total_tokens': loaded_data.get('total_tokens', 0),
                    'total_cost': loaded_data.get('total_cost', 0.0),
                    'queries_count': loaded_data.get('queries_count', 0),
                    'last_update': loaded_data.get('last_update', time.time())
                }
            logger.info(f"–î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {API_USAGE_FILE}: {API_USAGE}")
        else:
            logger.info(f"–§–∞–π–ª {API_USAGE_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            API_USAGE = {
                'total_tokens': 0,
                'total_cost': 0.0,
                'queries_count': 0,
                'last_update': time.time()
            }
            save_api_usage()  # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API: {e}")
        API_USAGE = {
            'total_tokens': 0,
            'total_cost': 0.0,
            'queries_count': 0,
            'last_update': time.time()
        }
        save_api_usage()  # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

async def send_long_message(update: Update, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏."""
    if not text: return
    user_id = update.effective_user.id
    for i in range(0, len(text), MAX_MESSAGE_LENGTH):
        chunk = text[i:i + MAX_MESSAGE_LENGTH]
        is_last_chunk = i + MAX_MESSAGE_LENGTH >= len(text)
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É
            if is_last_chunk:
                await update.message.reply_text(chunk, parse_mode=ParseMode.HTML, reply_markup=get_profile_keyboard(user_id))
            else:
                await update.message.reply_text(chunk, parse_mode=ParseMode.HTML)
                
            if len(text) > MAX_MESSAGE_LENGTH: await asyncio.sleep(0.5)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                error_msg = (
                    "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞</b>\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
                )
                await update.message.reply_html(error_msg, reply_markup=get_profile_keyboard(user_id))
            except Exception as inner_e:
                logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {inner_e}")
            break

def get_profile_keyboard(user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if user_id == ADMIN_ID:
        keyboard = [
            [KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton("üõ°Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
        ]
    else:
        keyboard = [[KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def init_user_data(user_id, user):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    if user_id not in USER_DATA:
        USER_DATA[user_id] = {
            'first_name': user.first_name,
            'last_name': user.last_name,
            'username': user.username,
            'joined_at': datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'requests_left': WEEKLY_REQUEST_LIMIT,
            'reset_time': get_next_reset_time(),
            'total_requests': 0,
        }
        save_user_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return USER_DATA[user_id]

def get_next_reset_time():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏)."""
    today = datetime.datetime.now()
    days_until_monday = 7 - today.weekday() if today.weekday() > 0 else 7
    next_monday = today + datetime.timedelta(days=days_until_monday)
    next_monday = next_monday.replace(hour=0, minute=0, second=0, microsecond=0)
    return next_monday.timestamp()

def check_and_update_requests(user_id, context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_data = USER_DATA[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞
    current_time = time.time()
    if current_time >= user_data['reset_time']:
        user_data['requests_left'] = WEEKLY_REQUEST_LIMIT
        user_data['reset_time'] = get_next_reset_time()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
        save_user_data()
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã
    if user_data['requests_left'] <= 0 and user_id != ADMIN_ID:
        reset_date = datetime.datetime.fromtimestamp(user_data['reset_time']).strftime("%d.%m.%Y")
        return False, f"–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ. –õ–∏–º–∏—Ç –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω {reset_date}."
    
    return True, None

async def call_claude_api(user_id: int, context: ContextTypes.DEFAULT_TYPE, new_user_content: list | str) -> str | None:
    """–í—ã–∑—ã–≤–∞–µ—Ç API Claude, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
    if 'history' not in context.user_data: context.user_data['history'] = []
    history = context.user_data['history']
    history.append({"role": "user", "content": new_user_content})

    max_history_messages = 10
    if len(history) > max_history_messages:
        history = history[-max_history_messages:]
        context.user_data['history'] = history

    headers = {"Authorization": f"Bearer {LANGDOCK_API_KEY}", "Content-Type": "application/json"}
    payload = {"model": CLAUDE_MODEL, "messages": history, "max_tokens": 4000}
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ò—Å—Ç–æ—Ä–∏—è: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
    async with API_SEMAPHORE:
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.post(LANGDOCK_API_URL, headers=headers, json=payload, timeout=API_TIMEOUT) as response:
                        response.raise_for_status()
                        response_data = await response.json()
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
                        API_USAGE['queries_count'] += 1
                        
                        # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö, —É—á–∏—Ç—ã–≤–∞–µ–º –µ–µ
                        if response_data.get('usage') and 'total_tokens' in response_data['usage']:
                            tokens_used = response_data['usage']['total_tokens']
                            API_USAGE['total_tokens'] += tokens_used
                            # –û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ (–º–æ–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É)
                            query_cost = tokens_used * 0.000005  # –ø—Ä–∏–º–µ—Ä–Ω–æ 0.5 –µ–≤—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤
                            API_USAGE['total_cost'] += query_cost
                            logger.info(f"–ó–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {tokens_used} —Ç–æ–∫–µ–Ω–æ–≤, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {query_cost:.4f} ‚Ç¨")
                        else:
                            # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
                            API_USAGE['total_cost'] += COST_PER_QUERY
                            logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å: {COST_PER_QUERY} ‚Ç¨")
                            
                        API_USAGE['last_update'] = time.time()
                        save_api_usage()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                
                except asyncio.TimeoutError:
                    logger.error(f"–¢–∞–π–º–∞—É—Ç API ({API_TIMEOUT} —Å–µ–∫) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return f"<b>‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è</b>\n\n–ù–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (–±–æ–ª–µ–µ {API_TIMEOUT} —Å–µ–∫). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å."
                except aiohttp.ClientResponseError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ HTTP {e.status}: {e.message}")
                    
                    # –ü–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if e.status == 401:
                        return "<b>‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ API –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    elif e.status == 429:
                        return "<b>‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    elif e.status >= 500:
                        return "<b>üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</b>\n\n–°–µ—Ä–≤–∏—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    else:
                        return f"<b>‚ùå –û—à–∏–±–∫–∞ {e.status}</b>\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

            if response_data.get("content") and isinstance(response_data["content"], list) and len(response_data["content"]) > 0:
                assistant_response_block = response_data["content"][0]
                if assistant_response_block.get("type") == "text":
                    assistant_text = assistant_response_block.get("text", "").strip()
                    if assistant_text:
                        history.append({"role": "assistant", "content": assistant_text})
                        context.user_data['history'] = history
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –î–ª–∏–Ω–∞: {len(assistant_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return assistant_text
                    else:
                        logger.error(f"API –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫: {response_data}")
                        return "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞:</b> –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
                else:
                     logger.error(f"API –≤–µ—Ä–Ω—É–ª–æ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫: {response_data}")
                     return "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞:</b> –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
            else:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API: {response_data}")
                stop_reason = response_data.get("stop_reason")
                if stop_reason == "max_tokens":
                     return "<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</b> –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏–ª—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º –∏ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /clear."
                return f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞:</b> –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. (–ü—Ä–∏—á–∏–Ω–∞: {stop_reason or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'})"

        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return "<b>üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
        except Exception as e:
            logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"<b>üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    user = update.effective_user
    user_id = user.id
    context.user_data['history'] = [] # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    init_user_data(user_id, user)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    welcome_message = (
        f"<b>‚ú® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user.first_name}! ‚ú®</b>\n\n"
        f"<b>ü§ñ –ú–µ–Ω—è –∑–æ–≤—É—Ç Claude 3.7 Sonnet</b> ‚Äî –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è!\n\n"
        f"<b>üîÆ –ß—Ç–æ —è –º–æ–≥—É:</b>\n"
        f"  ‚Ä¢ üí¨ –û—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        f"  ‚Ä¢ üñºÔ∏è –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        f"  ‚Ä¢ üìù –°–æ–∑–¥–∞–º –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é —Ç–µ–∫—Å—Ç—ã\n"
        f"  ‚Ä¢ üìä –ü–æ–º–æ–≥—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö\n"
        f"  ‚Ä¢ üß† –ó–∞–ø–æ–º–Ω—é –≤—Å—é –Ω–∞—à—É –±–µ—Å–µ–¥—É\n\n"
        f"<b>‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"  ‚Ä¢ /start ‚Äî –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\n"
        f"  ‚Ä¢ /clear ‚Äî –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏\n"
        f"  ‚Ä¢ /profile ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id == ADMIN_ID:
        welcome_message += f"  ‚Ä¢ /admin_panel ‚Äî –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        
    welcome_message += (
        f"\n<i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º!</i>\n\n"
        f"<b>üí´ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ! üí´</b>"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_html(welcome_message, reply_markup=get_profile_keyboard(user_id))
    logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear."""
    user_id = update.effective_user.id
    context.user_data['history'] = []
    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    clear_message = (
        "<b>üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!</b>\n\n"
        "–í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–±—ã—Ç—ã. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
    )
    
    await update.message.reply_html(clear_message, reply_markup=get_profile_keyboard(user_id))

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö."""
    user = update.effective_user
    user_id = user.id
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with USER_LOCKS[user_id]:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
        user_data = init_user_data(user_id, user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ —Å–±—Ä–æ—Å–∞
        check_and_update_requests(user_id, context)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–±—Ä–æ—Å–∞
        reset_date = datetime.datetime.fromtimestamp(user_data['reset_time']).strftime("%d.%m.%Y")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status = "üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user_id == ADMIN_ID else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        if user_id == ADMIN_ID:
            progress_bar = "‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞"  # –ü–æ–ª–Ω–∞—è –ø–æ–ª–æ—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
            progress_percent = 100
        else:
            progress_percent = int((user_data['requests_left'] / WEEKLY_REQUEST_LIMIT) * 100)
            filled_blocks = int(progress_percent / 10)
            progress_bar = "‚ñ∞" * filled_blocks + "‚ñ±" * (10 - filled_blocks)
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if user_id == ADMIN_ID:
            requests_emoji = "‚ôæÔ∏è"  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –¥–ª—è –∞–¥–º–∏–Ω–∞
        elif progress_percent >= 70:
            requests_emoji = "üü¢"  # –ú–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        elif progress_percent >= 30:
            requests_emoji = "üü°"  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        else:
            requests_emoji = "üî¥"  # –ú–∞–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
        joined_date = datetime.datetime.strptime(user_data['joined_at'], "%Y-%m-%d %H:%M:%S")
        now = datetime.datetime.now()
        days_since_joined = (now - joined_date).days
        
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        profile_info = (
            f"<b>üì± –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>\n\n"
            f"<b>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
            f"<b>‚îÇ üë§ –ò–º—è:</b> {user_data['first_name']}"
        )
        
        if user_data['last_name']:
            profile_info += f"\n<b>‚îÇ üë§ –§–∞–º–∏–ª–∏—è:</b> {user_data['last_name']}"
        
        if user_data['username']:
            profile_info += f"\n<b>‚îÇ üîñ Username:</b> @{user_data['username']}"
        
        profile_info += (
            f"\n<b>‚îÇ üÜî ID:</b> <code>{user_id}</code>"
            f"\n<b>‚îÇ üèÖ –°—Ç–∞—Ç—É—Å:</b> {status}"
            f"\n<b>‚îÇ üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_data['joined_at']}"
            f"\n<b>‚îÇ ‚è±Ô∏è –î–Ω–µ–π —Å –Ω–∞–º–∏:</b> {days_since_joined}"
            f"\n<b>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n\n"
            
            f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø</b>\n\n"
            f"<b>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
            f"<b>‚îÇ üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {user_data['total_requests']}"
        )
        
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
        if user_id != ADMIN_ID:
            profile_info += (
                f"\n<b>‚îÇ {requests_emoji} –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã:</b> {user_data['requests_left']} –∏–∑ {WEEKLY_REQUEST_LIMIT}"
                f"\n<b>‚îÇ üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress_bar} ({progress_percent}%)"
                f"\n<b>‚îÇ üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞:</b> {reset_date}"
            )
        else:
            profile_info += f"\n<b>‚îÇ {requests_emoji} –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:</b> –ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω"
        
        profile_info += f"\n<b>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile_info += (
            f"<i>üí° –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.</i>"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    await update.message.reply_html(profile_info, reply_markup=get_profile_keyboard(user_id))
    logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

async def reset_limits_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset_limits –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_ID:
        await update.message.reply_html(
            "<b>‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_profile_keyboard(user_id)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    args = context.args
    if not args or not args[0].isdigit():
        await update.message.reply_html(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset_limits [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]\n–ü—Ä–∏–º–µ—Ä: /reset_limits 123456789",
            reply_markup=get_profile_keyboard(user_id)
        )
        return
    
    target_user_id = int(args[0])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with USER_LOCKS[target_user_id]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        if target_user_id not in USER_DATA:
            await update.message.reply_html(
                f"<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_profile_keyboard(user_id)
            )
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        USER_DATA[target_user_id]['requests_left'] = WEEKLY_REQUEST_LIMIT
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_user_data()
    
    await update.message.reply_html(
        f"<b>‚úÖ –£—Å–ø–µ—à–Ω–æ</b>\n\n–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å–±—Ä–æ—à–µ–Ω.\n"
        f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {WEEKLY_REQUEST_LIMIT}",
        reply_markup=get_profile_keyboard(user_id)
    )
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} —Å–±—Ä–æ—Å–∏–ª –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_ID:
        await update.message.reply_html(
            "<b>‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_profile_keyboard(user_id)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
    user_data_copy = {}
    for uid in USER_DATA:
        async with USER_LOCKS[uid]:
            user_data_copy[uid] = USER_DATA[uid].copy()
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not user_data_copy:
        await update.message.reply_html(
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.",
            reply_markup=get_profile_keyboard(user_id)
        )
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = len(user_data_copy)
    total_requests = sum(user_data['total_requests'] for user_data in user_data_copy.values())
    active_users = sum(1 for user_data in user_data_copy.values() if user_data['total_requests'] > 0)
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤
    top_users = sorted(user_data_copy.items(), key=lambda x: x[1]['total_requests'], reverse=True)[:5]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    stats_message = (
        f"<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {active_users}\n"
        f"<b>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {total_requests}\n\n"
        f"<b>–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º:</b>\n"
    )
    
    for idx, (uid, user_data) in enumerate(top_users, 1):
        username = f"@{user_data['username']}" if user_data['username'] else "–ë–µ–∑ –∏–º–µ–Ω–∏"
        stats_message += f"{idx}. {user_data['first_name']} {user_data['last_name'] or ''} ({username}): {user_data['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    
    await update.message.reply_html(stats_message, reply_markup=get_profile_keyboard(user_id))
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

async def admin_panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_panel."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_ID:
        await update.message.reply_html(
            "<b>‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_profile_keyboard(user_id)
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ API
    admin_keyboard = [
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
        [KeyboardButton("‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã"), KeyboardButton("‚ûñ –°–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã")],
        [KeyboardButton("üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å API")],
        [KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è")]
    ]
    
    reply_markup = ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True)
    
    admin_message = (
        f"<b>üõ°Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, {update.effective_user.first_name}!\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞\n"
        f"‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ API"
    )
    
    await update.message.reply_html(admin_message, reply_markup=reply_markup)
    logger.info(f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id}")

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = update.effective_user.id
    user_text = update.message.text
    if not user_text: return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    if user_text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await profile_command(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    if user_id == ADMIN_ID:
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–∑–æ–≤–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if user_text == "üõ°Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
            await admin_panel_command(update, context)
            return
            
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        elif user_text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await stats_command(update, context)
            return
            
        # –ö–Ω–æ–ø–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        elif user_text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
            await export_users_list(update, context)
            return
            
        # –ö–Ω–æ–ø–∫–∞ –±–∞–ª–∞–Ω—Å–∞ API
        elif user_text == "üí∞ –ë–∞–ª–∞–Ω—Å API":
            await api_balance_command(update, context)
            return
            
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        elif user_text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è":
            return_message = "<b>‚úÖ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º</b>\n\n–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã."
            await update.message.reply_html(return_message, reply_markup=get_profile_keyboard(user_id))
            return
            
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        elif user_text == "‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã":
            context.user_data['admin_action'] = 'add_requests'
            await update.message.reply_html(
                "<b>‚ûï –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "<code>ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>123456789 5</code> - –¥–æ–±–∞–≤–∏—Ç 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID 123456789"
            )
            return
            
        # –ö–Ω–æ–ø–∫–∞ —Å–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        elif user_text == "‚ûñ –°–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã":
            context.user_data['admin_action'] = 'remove_requests'
            await update.message.reply_html(
                "<b>‚ûñ –°–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "<code>ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>123456789 3</code> - —Å–Ω–∏–º–µ—Ç 3 –∑–∞–ø—Ä–æ—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 123456789"
            )
            return
            
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        elif user_text == "üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
            context.user_data['admin_action'] = 'export_history'
            await update.message.reply_html(
                "<b>üì• –í—ã–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏:\n"
                "<code>ID</code>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>123456789</code>"
            )
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
        elif 'admin_action' in context.user_data:
            admin_action = context.user_data['admin_action']
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
            if admin_action == 'add_requests':
                parts = user_text.split()
                if len(parts) != 2 or not parts[0].isdigit() or not parts[1].isdigit():
                    await update.message.reply_html(
                        "<b>‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞</b>\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                        "<code>ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>"
                    )
                    return
                
                target_id = int(parts[0])
                amount = int(parts[1])
                
                async with USER_LOCKS[target_id]:
                    if target_id not in USER_DATA:
                        await update.message.reply_html(
                            f"<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.",
                            reply_markup=get_profile_keyboard(user_id)
                        )
                        del context.user_data['admin_action']
                        return
                    
                    USER_DATA[target_id]['requests_left'] += amount
                    save_user_data()
                    
                    await update.message.reply_html(
                        f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã</b>\n\n"
                        f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.\n"
                        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {USER_DATA[target_id]['requests_left']} –∑–∞–ø—Ä–æ—Å–æ–≤.",
                        reply_markup=get_profile_keyboard(user_id)
                    )
                    logger.info(f"–ê–¥–º–∏–Ω {user_id} –Ω–∞—á–∏—Å–ª–∏–ª {amount} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
                    del context.user_data['admin_action']
                    return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
            elif admin_action == 'remove_requests':
                parts = user_text.split()
                if len(parts) != 2 or not parts[0].isdigit() or not parts[1].isdigit():
                    await update.message.reply_html(
                        "<b>‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞</b>\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                        "<code>ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>"
                    )
                    return
                
                target_id = int(parts[0])
                amount = int(parts[1])
                
                async with USER_LOCKS[target_id]:
                    if target_id not in USER_DATA:
                        await update.message.reply_html(
                            f"<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.",
                            reply_markup=get_profile_keyboard(user_id)
                        )
                        del context.user_data['admin_action']
                        return
                    
                    USER_DATA[target_id]['requests_left'] = max(0, USER_DATA[target_id]['requests_left'] - amount)
                    save_user_data()
                    
                    await update.message.reply_html(
                        f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å—ã —Å–Ω—è—Ç—ã</b>\n\n"
                        f"–°–Ω—è—Ç–æ {amount} –∑–∞–ø—Ä–æ—Å–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.\n"
                        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {USER_DATA[target_id]['requests_left']} –∑–∞–ø—Ä–æ—Å–æ–≤.",
                        reply_markup=get_profile_keyboard(user_id)
                    )
                    logger.info(f"–ê–¥–º–∏–Ω {user_id} —Å–Ω—è–ª {amount} –∑–∞–ø—Ä–æ—Å–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
                    del context.user_data['admin_action']
                    return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
            elif admin_action == 'export_history':
                if not user_text.isdigit():
                    await update.message.reply_html(
                        "<b>‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞</b>\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                        reply_markup=get_profile_keyboard(user_id)
                    )
                    return
                
                target_id = int(user_text)
                await export_chat_history(update, context, target_id)
                del context.user_data['admin_action']
                return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in PROCESSING_USERS:
        await update.message.reply_html(
            "<b>‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</b>\n\n"
            "–Ø –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á—É, —Å—Ä–∞–∑—É –∑–∞–π–º—É—Å—å –Ω–æ–≤—ã–º!",
            reply_markup=get_profile_keyboard(user_id)
        )
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –î–ª–∏–Ω–∞: {len(user_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with USER_LOCKS[user_id]:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
        user_data = init_user_data(user_id, update.effective_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        has_requests, error_message = check_and_update_requests(user_id, context)
        if not has_requests:
            await update.message.reply_html(error_message, reply_markup=get_profile_keyboard(user_id))
            return
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
        if user_id != ADMIN_ID:
            user_data['requests_left'] -= 1
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        user_data['total_requests'] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_user_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    PROCESSING_USERS.add(user_id)
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

        response_text = await call_claude_api(user_id, context, user_text)
        if response_text: 
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            await send_long_message(update, response_text)
    finally:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        PROCESSING_USERS.discard(user_id)

async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in PROCESSING_USERS:
        await update.message.reply_html(
            "<b>‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</b>\n\n"
            "–Ø –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á—É, —Å—Ä–∞–∑—É –∑–∞–π–º—É—Å—å –Ω–æ–≤—ã–º!",
            reply_markup=get_profile_keyboard(user_id)
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with USER_LOCKS[user_id]:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
        user_data = init_user_data(user_id, update.effective_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        has_requests, error_message = check_and_update_requests(user_id, context)
        if not has_requests:
            await update.message.reply_html(error_message, reply_markup=get_profile_keyboard(user_id))
            return
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
        if user_id != ADMIN_ID:
            user_data['requests_left'] -= 1
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        user_data['total_requests'] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_user_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    PROCESSING_USERS.add(user_id)
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ..." (–∏–ª–∏ "–ø–µ—á–∞—Ç–∞–µ—Ç...")
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.UPLOAD_PHOTO)

        photo_file = await update.message.photo[-1].get_file()
        with io.BytesIO() as buf:
            await photo_file.download_to_memory(buf)
            buf.seek(0)
            image_bytes = buf.read()
            base64_image = base64.b64encode(image_bytes).decode('utf-8')

        media_type = "image/jpeg" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if photo_file.file_path:
            ext = photo_file.file_path.split('.')[-1].lower()
            if ext == 'png': media_type = "image/png"
            elif ext == 'gif': media_type = "image/gif"
            elif ext == 'webp': media_type = "image/webp"
        logger.info(f"–¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {media_type}")

        caption = update.message.caption if update.message.caption else "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
        logger.info(f"–ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: '{caption}'")

        user_content = [
            {"type": "image", "source": {"type": "base64", "media_type": media_type, "data": base64_image}},
            {"type": "text", "text": caption}
        ]
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –ø–µ—Ä–µ–¥ –¥–æ–ª–≥–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ API
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        processing_msg = await update.message.reply_html("<i>üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</i>")
        
        response_text = await call_claude_api(user_id, context, user_content)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        if response_text: 
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await send_long_message(update, response_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
        error_msg = (
            "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
        )
        await update.message.reply_html(error_msg, reply_markup=get_profile_keyboard(user_id))
    finally:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        PROCESSING_USERS.discard(user_id)

async def export_chat_history(update: Update, context: ContextTypes.DEFAULT_TYPE, target_id: int) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ."""
    admin_id = update.effective_user.id
    
    if target_id not in USER_DATA:
        await update.message.reply_html(
            f"<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.",
            reply_markup=get_profile_keyboard(admin_id)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = USER_DATA[target_id]
    first_name = user_data['first_name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    last_name = user_data['last_name'] or ""
    username = user_data['username'] or "–ù–µ—Ç"
    is_admin = target_id == ADMIN_ID
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —Ñ–∞–π–ª–∞
    current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    file_timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π HTML —Ñ–∞–π–ª
    html_content = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}</title>
        <style>
            :root {{
                --primary-color: #4b6cb7;
                --primary-light: #e4ecff;
                --secondary-color: #182848;
                --success-color: #4CAF50;
                --danger-color: #f44336;
                --warning-color: #ff9800;
                --light-gray: #f5f5f5;
                --dark-gray: #333;
                --border-radius: 8px;
                --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                --user-message-color: #e3f2fd;
                --assistant-message-color: #f1f8e9;
                --user-message-border: #2196F3;
                --assistant-message-border: #8BC34A;
                
                /* –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
                --bg-color: linear-gradient(135deg, #f5f7fa 0%, #e4ecff 100%);
                --container-bg: white;
                --text-color: #333;
                --text-muted: #666;
                --border-color: #eee;
                --scrollbar-thumb: #c1c1c1;
                --scrollbar-track: #f1f1f1;
                
                --transition-speed: 0.3s;
            }}
            
            /* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ */
            @media (prefers-color-scheme: dark) {{
                :root {{
                    --primary-color: #5d7dcf;
                    --primary-light: #1a2744;
                    --secondary-color: #0f1729;
                    --bg-color: linear-gradient(135deg, #111827 0%, #1e293b 100%);
                    --container-bg: #1f2937;
                    --text-color: #e2e8f0;
                    --text-muted: #9ca3af;
                    --border-color: #374151;
                    --user-message-color: #172032;
                    --assistant-message-color: #1a2e1a;
                    --user-message-border: #3b82f6;
                    --assistant-message-border: #4ade80;
                    --scrollbar-thumb: #4b5563;
                    --scrollbar-track: #1f2937;
                }}
            }}
            
            /* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã (—Å–∫—Ä—ã—Ç –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º JS) */
            #theme-toggle {{
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 1000;
                background: var(--primary-color);
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 20px;
                cursor: pointer;
                box-shadow: var(--box-shadow);
                transition: all var(--transition-speed) ease;
            }}
            
            #theme-toggle:hover {{
                transform: translateY(-2px);
            }}
            
            * {{
                box-sizing: border-box;
                margin: 0;
                padding: 0;
                transition: background-color var(--transition-speed) ease, 
                           color var(--transition-speed) ease,
                           border-color var(--transition-speed) ease,
                           box-shadow var(--transition-speed) ease;
            }}
            
            body {{
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                line-height: 1.6;
                color: var(--text-color);
                background: var(--bg-color);
                padding: 20px;
                min-height: 100vh;
            }}
            
            /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */
            ::-webkit-scrollbar {{
                width: 10px;
            }}
            
            ::-webkit-scrollbar-track {{
                background: var(--scrollbar-track);
                border-radius: 10px;
            }}
            
            ::-webkit-scrollbar-thumb {{
                background: var(--scrollbar-thumb);
                border-radius: 10px;
            }}
            
            ::-webkit-scrollbar-thumb:hover {{
                background: var(--primary-color);
            }}
            
            .container {{
                max-width: 900px;
                margin: 0 auto;
                background-color: var(--container-bg);
                border-radius: var(--border-radius);
                box-shadow: var(--box-shadow);
                overflow: hidden;
                opacity: 0;
                transform: translateY(20px);
                animation: fadeIn 0.5s ease forwards;
            }}
            
            @keyframes fadeIn {{
                to {{
                    opacity: 1;
                    transform: translateY(0);
                }}
            }}
            
            .header {{
                background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
                color: white;
                padding: 30px;
                text-align: center;
            }}
            
            .header h1 {{
                margin-bottom: 10px;
                font-size: 2rem;
                opacity: 0;
                transform: translateY(-10px);
                animation: slideDown 0.5s ease 0.2s forwards;
            }}
            
            @keyframes slideDown {{
                to {{
                    opacity: 1;
                    transform: translateY(0);
                }}
            }}
            
            .header p {{
                font-size: 1rem;
                opacity: 0;
                animation: fadeIn 0.5s ease 0.4s forwards;
            }}
            
            .user-info {{
                padding: 20px;
                margin: 20px;
                background-color: var(--primary-light);
                border-radius: var(--border-radius);
                display: flex;
                flex-wrap: wrap;
                justify-content: space-between;
                align-items: center;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
                opacity: 0;
                animation: fadeIn 0.5s ease 0.6s forwards;
            }}
            
            .user-profile {{
                display: flex;
                align-items: center;
                margin-bottom: 15px;
                flex: 1;
                min-width: 300px;
            }}
            
            .user-avatar {{
                width: 70px;
                height: 70px;
                background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                margin-right: 20px;
                font-size: 1.8rem;
                font-weight: bold;
                color: white;
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
                border: 3px solid rgba(255, 255, 255, 0.2);
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }}
            
            .user-avatar:hover {{
                transform: scale(1.05);
                box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
            }}
            
            .user-details {{
                flex-grow: 1;
            }}
            
            .user-name {{
                font-size: 1.6rem;
                font-weight: bold;
                display: flex;
                align-items: center;
                margin-bottom: 5px;
            }}
            
            .admin-badge {{
                background-color: var(--warning-color);
                color: white;
                font-size: 0.7rem;
                padding: 4px 10px;
                border-radius: 15px;
                margin-left: 10px;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                animation: pulse 2s infinite;
            }}
            
            @keyframes pulse {{
                0% {{ transform: scale(1); }}
                50% {{ transform: scale(1.05); }}
                100% {{ transform: scale(1); }}
            }}
            
            .user-id {{
                font-size: 0.95rem;
                color: var(--text-muted);
            }}
            
            .user-stats {{
                display: flex;
                flex-wrap: wrap;
                gap: 20px;
                flex: 1;
                min-width: 300px;
            }}
            
            .stat-item {{
                background: var(--container-bg);
                padding: 15px;
                border-radius: var(--border-radius);
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
                flex: 1;
                min-width: 120px;
                text-align: center;
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }}
            
            .stat-item:hover {{
                transform: translateY(-5px);
                box-shadow: 0 8px 15px rgba(0, 0, 0, 0.15);
            }}
            
            .stat-value {{
                font-size: 1.6rem;
                font-weight: bold;
                color: var(--primary-color);
                margin-bottom: 5px;
            }}
            
            .stat-label {{
                font-size: 0.85rem;
                color: var(--text-muted);
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }}
            
            .messages-container {{
                padding: 20px;
                margin: 20px;
                opacity: 0;
                animation: fadeIn 0.5s ease 0.8s forwards;
            }}
            
            .messages-header {{
                margin-bottom: 20px;
                border-bottom: 2px solid var(--primary-color);
                padding-bottom: 10px;
                position: relative;
            }}
            
            .messages-header:after {{
                content: '';
                position: absolute;
                bottom: -2px;
                left: 0;
                width: 100px;
                height: 2px;
                background-color: var(--secondary-color);
            }}
            
            .message {{
                margin-bottom: 25px;
                padding: 15px;
                border-radius: var(--border-radius);
                box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
                position: relative;
                max-width: 80%;
                opacity: 0;
                animation: slideIn 0.5s ease forwards;
                animation-delay: calc(var(--i) * 0.1s + 1s);
            }}
            
            @keyframes slideIn {{
                from {{
                    opacity: 0;
                    transform: translateX(-20px);
                }}
                to {{
                    opacity: 1;
                    transform: translateX(0);
                }}
            }}
            
            .user {{
                background-color: var(--user-message-color);
                border-left: 4px solid var(--user-message-border);
                margin-left: auto;
                transform: translateX(20px);
                animation-name: slideInRight;
            }}
            
            @keyframes slideInRight {{
                from {{
                    opacity: 0;
                    transform: translateX(20px);
                }}
                to {{
                    opacity: 1;
                    transform: translateX(0);
                }}
            }}
            
            .assistant {{
                background-color: var(--assistant-message-color);
                border-left: 4px solid var(--assistant-message-border);
                margin-right: auto;
                transform: translateX(-20px);
                animation-name: slideIn;
            }}
            
            .message-header {{
                display: flex;
                justify-content: space-between;
                margin-bottom: 10px;
                font-size: 0.85rem;
                color: var(--text-muted);
                border-bottom: 1px solid var(--border-color);
                padding-bottom: 8px;
            }}
            
            .message-role {{
                font-weight: bold;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }}
            
            .message-time {{
                font-size: 0.8rem;
                color: var(--text-muted);
            }}
            
            .message-content {{
                white-space: pre-wrap;
                overflow-wrap: break-word;
                line-height: 1.5;
                font-size: 1rem;
            }}
            
            .no-messages {{
                text-align: center;
                padding: 40px;
                background-color: rgba(255, 248, 225, 0.2);
                border-radius: var(--border-radius);
                color: var(--warning-color);
                border: 1px dashed var(--warning-color);
                margin: 20px 0;
            }}
            
            .footer {{
                text-align: center;
                padding: 25px;
                background-color: var(--secondary-color);
                color: white;
                font-size: 0.9rem;
                position: relative;
                overflow: hidden;
            }}
            
            /* –ê–Ω–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã –≤ —Ñ—É—Ç–µ—Ä–µ */
            .footer:before, .footer:after {{
                content: '';
                position: absolute;
                width: 200px;
                height: 200px;
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.05);
                z-index: 0;
            }}
            
            .footer:before {{
                left: -100px;
                top: -100px;
                animation: float 10s infinite ease-in-out;
            }}
            
            .footer:after {{
                right: -100px;
                bottom: -100px;
                animation: float 13s infinite ease-in-out reverse;
            }}
            
            @keyframes float {{
                0%, 100% {{ transform: translate(0, 0); }}
                25% {{ transform: translate(10px, 10px); }}
                50% {{ transform: translate(5px, -5px); }}
                75% {{ transform: translate(-10px, 5px); }}
            }}
            
            .footer p {{
                position: relative;
                z-index: 1;
            }}
        </style>
    </head>
    <body>
        <!--<button id="theme-toggle">–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É</button>-->
        <div class="container">
            <div class="header">
                <h1>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
                <p>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {current_time}</p>
            </div>
            
            <div class="user-info">
                <div class="user-profile">
                    <div class="user-avatar">{(first_name[0] if first_name and first_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else "?") + (last_name[0] if last_name else "")}</div>
                    <div class="user-details">
                        <div class="user-name">
                            {first_name} {last_name}
                            {f'<span class="admin-badge">–ê–î–ú–ò–ù</span>' if is_admin else ''}
                        </div>
                        <div class="user-id">ID: {target_id} | @{username if username != "–ù–µ—Ç" else "‚Äî"}</div>
                    </div>
                </div>
                
                <div class="user-stats">
                    <div class="stat-item">
                        <div class="stat-value">{user_data['total_requests']}</div>
                        <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">{user_data['requests_left'] if not is_admin else "‚àû"}</div>
                        <div class="stat-label">–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">{user_data['joined_at'].split(' ')[0]}</div>
                        <div class="stat-label">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</div>
                    </div>
                </div>
            </div>
            
            <div class="messages-container">
                <div class="messages-header">
                    <h2>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π</h2>
                </div>
    """
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    application = context.application
    app_user_data = application.user_data.get(target_id)
    
    if not app_user_data or 'history' not in app_user_data or not app_user_data['history']:
        html_content += """
                <div class="no-messages">
                    <h3>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞</h3>
                    <p>–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.</p>
                </div>
        """
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ HTML
        for i, message in enumerate(app_user_data['history']):
            role = message.get('role', 'unknown')
            content = message.get('content', '')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ–≥–æ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
            message_time = datetime.datetime.now() - datetime.timedelta(minutes=(len(app_user_data['history'])-i)*10)
            time_str = message_time.strftime("%d.%m.%Y %H:%M:%S")
            
            if isinstance(content, list):  # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–∫–∞–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏)
                text = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é: "
                for item in content:
                    if item.get('type') == 'text':
                        text += item.get('text', '')
                content = text
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML (–∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ —Ç.–¥.)
            if isinstance(content, str):
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                content = content.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
                # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ HTML-—Ç–µ–≥–∏ <br>
                content = content.replace("\n", "<br>")
            
            html_content += f"""
                <div class="message {role}" style="--i: {i};">
                    <div class="message-header">
                        <span class="message-role">{role.upper()}</span>
                        <span class="message-time">{time_str}</span>
                    </div>
                    <div class="message-content">{content}</div>
                </div>
            """
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º HTML-–¥–æ–∫—É–º–µ–Ω—Ç
    html_content += """
            </div>
            
            <div class="footer">
                <p>¬© Claude 3.7 Sonnet Telegram Bot</p>
            </div>
        </div>
        
        <!-- <script>
            // JavaScript –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
            document.getElementById('theme-toggle').addEventListener('click', function() {
                document.body.classList.toggle('dark-theme');
                if (document.body.classList.contains('dark-theme')) {
                    this.textContent = '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞';
                } else {
                    this.textContent = 'üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞';
                }
            });
        </script> -->
    </body>
    </html>
    """
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    filename = f"chat_history_{target_id}_{file_timestamp}.html"
    with open(filename, 'w', encoding='utf-8') as file:
        file.write(html_content)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    with open(filename, 'rb') as file:
        await update.message.reply_document(
            document=file, 
            filename=filename,
            caption=f"–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} ({first_name})"
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(filename)
    
    await update.message.reply_html(
        f"<b>‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n"
        f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} ({first_name}) —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω–∞.",
        reply_markup=get_profile_keyboard(admin_id)
    )
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –≤—ã–≥—Ä—É–∑–∏–ª –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")

async def export_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ."""
    admin_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not USER_DATA:
        await update.message.reply_html(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=get_profile_keyboard(admin_id)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —Ñ–∞–π–ª–∞
    current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    file_timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π HTML —Ñ–∞–π–ª
    html_content = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ Claude 3.7 Sonnet</title>
        <style>
            :root {{
                --primary-color: #4b6cb7;
                --primary-light: #e4ecff;
                --secondary-color: #182848;
                --success-color: #4CAF50;
                --danger-color: #f44336;
                --warning-color: #ff9800;
                --light-gray: #f5f5f5;
                --dark-gray: #333;
                --border-radius: 10px;
                --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                
                /* –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
                --bg-color: linear-gradient(135deg, #f5f7fa 0%, #e4ecff 100%);
                --container-bg: white;
                --text-color: #333;
                --text-muted: #666;
                --border-color: #eee;
                --card-bg: white;
                --scrollbar-thumb: #c1c1c1;
                --scrollbar-track: #f1f1f1;
                
                --transition-speed: 0.3s;
            }}
            
            /* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ */
            @media (prefers-color-scheme: dark) {{
                :root {{
                    --primary-color: #5d7dcf;
                    --primary-light: #1a2744;
                    --secondary-color: #0f1729;
                    --bg-color: linear-gradient(135deg, #111827 0%, #1e293b 100%);
                    --container-bg: #1f2937;
                    --text-color: #e2e8f0;
                    --text-muted: #9ca3af;
                    --border-color: #374151;
                    --card-bg: #1f2937;
                    --scrollbar-thumb: #4b5563;
                    --scrollbar-track: #1f2937;
                }}
            }}
            
            * {{
                box-sizing: border-box;
                margin: 0;
                padding: 0;
                transition: background-color var(--transition-speed) ease, 
                           color var(--transition-speed) ease,
                           border-color var(--transition-speed) ease,
                           box-shadow var(--transition-speed) ease;
            }}
            
            body {{
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                line-height: 1.6;
                color: var(--text-color);
                background: var(--bg-color);
                padding: 20px;
                min-height: 100vh;
            }}
            
            /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */
            ::-webkit-scrollbar {{
                width: 10px;
            }}
            
            ::-webkit-scrollbar-track {{
                background: var(--scrollbar-track);
                border-radius: 10px;
            }}
            
            ::-webkit-scrollbar-thumb {{
                background: var(--scrollbar-thumb);
                border-radius: 10px;
            }}
            
            ::-webkit-scrollbar-thumb:hover {{
                background: var(--primary-color);
            }}
            
            .container {{
                max-width: 1200px;
                margin: 0 auto;
                background-color: var(--container-bg);
                border-radius: var(--border-radius);
                box-shadow: var(--box-shadow);
                overflow: hidden;
                opacity: 0;
                transform: translateY(20px);
                animation: fadeIn 0.5s ease forwards;
            }}
            
            @keyframes fadeIn {{
                to {{
                    opacity: 1;
                    transform: translateY(0);
                }}
            }}
            
            .header {{
                background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
                color: white;
                padding: 35px;
                text-align: center;
                position: relative;
                overflow: hidden;
            }}
            
            .header::before, .header::after {{
                content: '';
                position: absolute;
                width: 300px;
                height: 300px;
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.05);
                z-index: 0;
            }}
            
            .header::before {{
                top: -150px;
                left: -100px;
            }}
            
            .header::after {{
                bottom: -150px;
                right: -100px;
            }}
            
            .header h1 {{
                margin-bottom: 15px;
                font-size: 2.4rem;
                position: relative;
                z-index: 1;
                opacity: 0;
                transform: translateY(-10px);
                animation: slideDown 0.5s ease 0.2s forwards;
            }}
            
            @keyframes slideDown {{
                to {{
                    opacity: 1;
                    transform: translateY(0);
                }}
            }}
            
            .header p {{
                font-size: 1.2rem;
                position: relative;
                z-index: 1;
                opacity: 0;
                animation: fadeIn 0.5s ease 0.4s forwards;
            }}
            
            .stats-container {{
                background-color: var(--primary-light);
                padding: 25px;
                margin: 25px;
                border-radius: var(--border-radius);
                display: flex;
                justify-content: space-around;
                flex-wrap: wrap;
                gap: 20px;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
                opacity: 0;
                animation: fadeIn 0.5s ease 0.6s forwards;
            }}
            
            .stat-card {{
                background-color: var(--card-bg);
                padding: 25px;
                border-radius: var(--border-radius);
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
                flex: 1;
                min-width: 220px;
                text-align: center;
                transition: transform 0.3s ease, box-shadow 0.3s ease;
                position: relative;
                overflow: hidden;
            }}
            
            .stat-card::before {{
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 5px;
                background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            }}
            
            .stat-card:hover {{
                transform: translateY(-7px);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
            }}
            
            .stat-card h3 {{
                color: var(--text-color);
                margin-bottom: 15px;
                font-size: 1.4rem;
                position: relative;
            }}
            
            .stat-card .stat-value {{
                font-size: 2.5rem;
                font-weight: bold;
                color: var(--primary-color);
                margin-bottom: 10px;
                position: relative;
            }}
            
            .users-container {{
                padding: 25px;
                margin: 25px;
                opacity: 0;
                animation: fadeIn 0.5s ease 0.8s forwards;
            }}
            
            .users-header {{
                margin-bottom: 30px;
                border-bottom: 2px solid var(--primary-color);
                padding-bottom: 15px;
                position: relative;
            }}
            
            .users-header::after {{
                content: '';
                position: absolute;
                bottom: -2px;
                left: 0;
                width: 100px;
                height: 2px;
                background-color: var(--secondary-color);
            }}
            
            .user-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
                gap: 25px;
            }}
            
            .user-card {{
                background-color: var(--container-bg);
                border-radius: var(--border-radius);
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
                padding: 25px;
                transition: all 0.3s ease;
                border-left: 5px solid var(--primary-color);
                position: relative;
                overflow: hidden;
                opacity: 0;
                animation: fadeUp 0.5s ease forwards;
            }}
            
            @keyframes fadeUp {{
                from {{
                    opacity: 0;
                    transform: translateY(20px);
                }}
                to {{
                    opacity: 1;
                    transform: translateY(0);
                }}
            }}
            
            .user-card:hover {{
                transform: translateY(-7px) scale(1.02);
                box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
            }}
            
            .user-card.admin {{
                border-left: 5px solid var(--warning-color);
            }}
            
            .user-card::before {{
                content: '';
                position: absolute;
                width: 200px;
                height: 200px;
                background: radial-gradient(circle, var(--primary-light) 0%, transparent 70%);
                opacity: 0.3;
                bottom: -100px;
                right: -100px;
                border-radius: 50%;
                z-index: 0;
                transition: all 0.5s ease;
            }}
            
            .user-card:hover::before {{
                transform: scale(1.2);
            }}
            
            .user-card.admin::before {{
                background: radial-gradient(circle, rgba(255, 152, 0, 0.2) 0%, transparent 70%);
            }}
            
            .user-header {{
                display: flex;
                align-items: center;
                margin-bottom: 20px;
                position: relative;
                z-index: 1;
            }}
            
            .user-avatar {{
                width: 60px;
                height: 60px;
                background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                margin-right: 20px;
                font-size: 1.6rem;
                font-weight: bold;
                color: white;
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
                border: 3px solid rgba(255, 255, 255, 0.2);
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }}
            
            .user-card:hover .user-avatar {{
                transform: rotate(10deg) scale(1.1);
            }}
            
            .admin-badge {{
                background-color: var(--warning-color);
                color: white;
                font-size: 0.7rem;
                padding: 4px 10px;
                border-radius: 15px;
                margin-left: 10px;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                animation: pulse 2s infinite;
            }}
            
            @keyframes pulse {{
                0% {{ transform: scale(1); }}
                50% {{ transform: scale(1.05); }}
                100% {{ transform: scale(1); }}
            }}
            
            .user-info {{
                flex-grow: 1;
            }}
            
            .user-name {{
                font-weight: bold;
                font-size: 1.3rem;
                color: var(--text-color);
                display: flex;
                align-items: center;
                margin-bottom: 5px;
            }}
            
            .user-username {{
                color: var(--text-muted);
                font-size: 0.95rem;
            }}
            
            .user-details {{
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 15px;
                margin-top: 20px;
                position: relative;
                z-index: 1;
            }}
            
            .detail-item {{
                display: flex;
                flex-direction: column;
                background-color: rgba(0, 0, 0, 0.03);
                padding: 12px;
                border-radius: var(--border-radius);
                transition: all 0.3s ease;
            }}
            
            .user-card:hover .detail-item {{
                background-color: rgba(0, 0, 0, 0.05);
            }}
            
            .detail-label {{
                font-size: 0.75rem;
                color: var(--text-muted);
                margin-bottom: 5px;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }}
            
            .detail-value {{
                font-size: 1.1rem;
                font-weight: 500;
            }}
            
            .requests-left {{
                color: var(--success-color);
                font-weight: bold;
            }}
            
            .requests-low {{
                color: var(--danger-color);
                font-weight: bold;
            }}
            
            .footer {{
                text-align: center;
                padding: 30px;
                background-color: var(--secondary-color);
                color: white;
                position: relative;
                overflow: hidden;
            }}
            
            .footer::before, .footer::after {{
                content: '';
                position: absolute;
                width: 200px;
                height: 200px;
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.05);
                z-index: 0;
            }}
            
            .footer::before {{
                left: -100px;
                top: -100px;
                animation: float 10s infinite ease-in-out;
            }}
            
            .footer::after {{
                right: -100px;
                bottom: -100px;
                animation: float 13s infinite ease-in-out reverse;
            }}
            
            @keyframes float {{
                0%, 100% {{ transform: translate(0, 0); }}
                25% {{ transform: translate(10px, 10px); }}
                50% {{ transform: translate(5px, -5px); }}
                75% {{ transform: translate(-10px, 5px); }}
            }}
            
            .footer p {{
                position: relative;
                z-index: 1;
                font-size: 1rem;
            }}
            
            /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
            @media (max-width: 768px) {{
                .user-grid {{
                    grid-template-columns: 1fr;
                }}
                
                .stats-container {{
                    flex-direction: column;
                }}
                
                .header h1 {{
                    font-size: 1.8rem;
                }}
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞</h1>
                <p>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {current_time}</p>
            </div>
            
            <div class="stats-container">
                <div class="stat-card">
                    <h3>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                    <div class="stat-value">{len(USER_DATA)}</div>
                </div>
                <div class="stat-card">
                    <h3>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                    <div class="stat-value">{sum(1 for user_data in USER_DATA.values() if user_data['total_requests'] > 0)}</div>
                </div>
                <div class="stat-card">
                    <h3>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</h3>
                    <div class="stat-value">{sum(user_data['total_requests'] for user_data in USER_DATA.values())}</div>
                </div>
            </div>
            
            <div class="users-container">
                <div class="users-header">
                    <h2>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö</h2>
                </div>
                
                <div class="user-grid">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤
    sorted_users = sorted(USER_DATA.items(), key=lambda x: (x[0] != ADMIN_ID, -x[1]['total_requests']))
    
    for i, (user_id, user_data) in enumerate(sorted_users):
        first_name = user_data['first_name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        last_name = user_data['last_name'] or ""
        username = user_data['username'] or "–ù–µ—Ç"
        is_admin = user_id == ADMIN_ID
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
        initials = (first_name[0] if first_name and first_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else "?") + (last_name[0] if last_name else "")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∏–∑–∫–∏–π/–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π)
        requests_class = "requests-low" if user_data['requests_left'] < 3 and not is_admin else "requests-left"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–±—Ä–æ—Å–∞
        reset_date = datetime.datetime.fromtimestamp(user_data['reset_time']).strftime("%d.%m.%Y")
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        animation_delay = min(i * 0.1, 2) # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        
        html_content += f"""
                    <div class="user-card{' admin' if is_admin else ''}" style="animation-delay: {animation_delay}s">
                        <div class="user-header">
                            <div class="user-avatar">{initials.upper()}</div>
                            <div class="user-info">
                                <div class="user-name">
                                    {first_name} {last_name}
                                    {f'<span class="admin-badge">–ê–î–ú–ò–ù</span>' if is_admin else ''}
                                </div>
                                <div class="user-username">@{username if username != "–ù–µ—Ç" else "‚Äî"}</div>
                            </div>
                        </div>
                        <div class="user-details">
                            <div class="detail-item">
                                <div class="detail-label">ID</div>
                                <div class="detail-value">{user_id}</div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</div>
                                <div class="detail-value">{user_data['joined_at'].split(' ')[0]}</div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                                <div class="detail-value">{user_data['total_requests']}</div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                                <div class="detail-value {requests_class}">
                                    {user_data['requests_left'] if not is_admin else "‚àû"}
                                </div>
                            </div>
                            <div class="detail-item" style="grid-column: span 2;">
                                <div class="detail-label">–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞</div>
                                <div class="detail-value">{reset_date if not is_admin else "–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω"}</div>
                            </div>
                        </div>
                    </div>
        """
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º HTML-–¥–æ–∫—É–º–µ–Ω—Ç
    html_content += """
                </div>
            </div>
            
            <div class="footer">
                <p>¬© Claude 3.7 Sonnet Telegram Bot</p>
            </div>
        </div>
    </body>
    </html>
    """
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    filename = f"users_list_{file_timestamp}.html"
    with open(filename, 'w', encoding='utf-8') as file:
        file.write(html_content)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    with open(filename, 'rb') as file:
        await update.message.reply_document(
            document=file, 
            filename=filename,
            caption=f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ (–≤—Å–µ–≥–æ: {len(USER_DATA)})"
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(filename)
    
    await update.message.reply_html(
        f"<b>‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω</b>\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(USER_DATA)}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {sum(1 for user_data in USER_DATA.values() if user_data['total_requests'] > 0)}",
        reply_markup=get_profile_keyboard(admin_id)
    )
    
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –≤—ã–≥—Ä—É–∑–∏–ª —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    print("\n" + "‚òÖ" * 60)
    print("‚òÖ    –ó–∞–ø—É—Å–∫ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –Ω–∞ –±–∞–∑–µ Claude 3.7 Sonnet    ‚òÖ")
    print("‚òÖ" * 60 + "\n")
    
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        load_user_data()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
        load_api_usage()
        
        # –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º JobQueue –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—à–∏–±–∫–∏ 'weak reference'
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        builder = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN) \
            .job_queue(None) \
            .concurrent_updates(True) \
            .connection_pool_size(8) \
            .get_updates_connection_pool_size(16) \
            .pool_timeout(API_TIMEOUT)
            
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        application = builder.build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("clear", clear_command))
        application.add_handler(CommandHandler("profile", profile_command))
        application.add_handler(CommandHandler("reset_limits", reset_limits_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("admin_panel", admin_panel_command))
        application.add_handler(CommandHandler("api_balance", api_balance_command))
        application.add_handler(MessageHandler(filters.PHOTO & (~filters.COMMAND), handle_photo_message))
        application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text_message))

        print("‚îå" + "‚îÄ" * 50 + "‚îê")
        print("‚îÇ" + " " * 15 + "–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´" + " " * 16 + "‚îÇ")
        print("‚îú" + "‚îÄ" * 50 + "‚î§")
        print("‚îÇ ‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω                  ‚îÇ")
        print("‚îÇ ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã          ‚îÇ")
        print("‚îÇ ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞                ‚îÇ")
        print("‚îÇ ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞     ‚îÇ")
        print("‚îÇ ‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞      ‚îÇ")
        print("‚îÇ ‚öôÔ∏è  –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞...              ‚îÇ")
        print("‚îî" + "‚îÄ" * 50 + "‚îò\n")
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except Exception as e:
        print("\n" + "‚ö†Ô∏è " * 10)
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ë–û–¢–ê:")
        print(f"‚ùå {e}")
        print("‚ö†Ô∏è " * 10 + "\n")
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ API
async def api_balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_ID:
        await update.message.reply_html(
            "<b>‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_profile_keyboard(user_id)
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    processing_msg = await update.message.reply_html(
        "<i>üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ API, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</i>"
    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç LangDock API
    langdock_data = await get_langdock_usage()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–∫–∂–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    load_api_usage()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if langdock_data:
        # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API
            # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç API
            if 'usage' in langdock_data:
                tokens_used = langdock_data.get('usage', {}).get('total_tokens', API_USAGE['total_tokens'])
                cost = langdock_data.get('usage', {}).get('cost', API_USAGE['total_cost'])
                requests_count = langdock_data.get('usage', {}).get('requests', API_USAGE['queries_count'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                API_USAGE['total_tokens'] = tokens_used
                API_USAGE['total_cost'] = cost
                API_USAGE['queries_count'] = requests_count
                API_USAGE['last_update'] = time.time()
                save_api_usage()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                logger.info(f"–î–∞–Ω–Ω—ã–µ API —Å LangDock: –∑–∞–ø—Ä–æ—Å—ã={requests_count}, —Ç–æ–∫–µ–Ω—ã={tokens_used}, —Å—Ç–æ–∏–º–æ—Å—Ç—å={cost}")
                using_real_data = True
            else:
                # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç LangDock API: {langdock_data}")
                using_real_data = False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç LangDock API: {e}")
            using_real_data = False
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç API –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç LangDock API, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        using_real_data = False
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await processing_msg.delete()
        
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö API
    remaining_balance = INITIAL_API_BALANCE - API_USAGE['total_cost']
    percentage_used = (API_USAGE['total_cost'] / INITIAL_API_BALANCE) * 100 if INITIAL_API_BALANCE > 0 else 0
    
    # –û—Ñ–æ—Ä–º–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
    data_source = "üåê –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ LangDock" if using_real_data else "üìä –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ"
    
    balance_message = (
        f"<b>üí∞ –ë–ê–õ–ê–ù–° API LANGDOCK</b>\n\n"
        f"{data_source}\n\n"
        f"<b>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
        f"<b>‚îÇ üí≥ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {INITIAL_API_BALANCE:.2f} ‚Ç¨\n"
        f"<b>‚îÇ üìâ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {API_USAGE['total_cost']:.2f} ‚Ç¨ ({percentage_used:.1f}%)\n"
        f"<b>‚îÇ üìà –û—Å—Ç–∞–ª–æ—Å—å:</b> {remaining_balance:.2f} ‚Ç¨\n"
        f"<b>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n\n"
        
        f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø</b>\n\n"
        f"<b>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
        f"<b>‚îÇ üî¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {API_USAGE['queries_count']}\n"
        f"<b>‚îÇ üî† –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤:</b> {API_USAGE['total_tokens']}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ (–∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å)
    if API_USAGE['queries_count'] > 0:
        avg_cost = API_USAGE['total_cost'] / API_USAGE['queries_count']
        balance_message += f"<b>‚îÇ üí± –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞:</b> {avg_cost:.4f} ‚Ç¨\n"
    else:
        balance_message += f"<b>‚îÇ üí± –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞:</b> 0.0000 ‚Ç¨\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    filled_blocks = int(percentage_used / 10) if percentage_used > 0 else 0
    balance_bar = "‚ñ∞" * filled_blocks + "‚ñ±" * (10 - filled_blocks)
    
    # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
    if percentage_used < 50:
        balance_emoji = "üü¢"  # –ë–æ–ª–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –±–∞–ª–∞–Ω—Å–∞
    elif percentage_used < 80:
        balance_emoji = "üü°"  # –ú–µ–Ω–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –±–∞–ª–∞–Ω—Å–∞
    else:
        balance_emoji = "üî¥"  # –û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ —Å—Ä–µ–¥—Å—Ç–≤
        
    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    last_update = datetime.datetime.fromtimestamp(API_USAGE['last_update']).strftime("%d.%m.%Y %H:%M:%S")
    
    balance_message += (
        f"<b>‚îÇ üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {last_update}\n"
        f"<b>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n\n"
        
        f"<b>üìã –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ë–ê–õ–ê–ù–°–ê</b>\n\n"
        f"{balance_emoji} {balance_bar} {percentage_used:.1f}%\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É
    if percentage_used > 80:
        balance_message += (
            f"<b>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!</b>\n"
            f"–ë–∞–ª–∞–Ω—Å API –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞."
        )
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
    if not using_real_data:
        balance_message += (
            f"\n\n<i>‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —Å —Å–µ—Ä–≤–µ—Ä–∞ LangDock. "
            f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —É—á–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API.</i>"
        )
    
    await update.message.reply_html(balance_message, reply_markup=get_profile_keyboard(user_id))
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ API ({data_source})")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API –Ω–∞–ø—Ä—è–º—É—é —Å LangDock
async def get_langdock_usage():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API –Ω–∞–ø—Ä—è–º—É—é —Å —Å–µ—Ä–≤–µ—Ä–∞ LangDock."""
    try:
        headers = {"Authorization": f"Bearer {LANGDOCK_API_KEY}", "Content-Type": "application/json"}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞ –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)
        now = datetime.datetime.now()
        start_of_month = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
        start_date = start_of_month.strftime("%Y-%m-%d")
        end_date = now.strftime("%Y-%m-%d")
        
        params = {
            "start_date": start_date,
            "end_date": end_date
        }
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API LangDock –∑–∞ –ø–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        
        async with aiohttp.ClientSession() as session:
            try:
                # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π API –±–∏–ª–ª–∏–Ω–≥–∞
                async with session.get(LANGDOCK_BILLING_API_URL, headers=headers, params=params, timeout=API_TIMEOUT) as response:
                    if response.status == 200:
                        usage_data = await response.json()
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API LangDock: {usage_data}")
                        return usage_data
                    elif response.status == 404:
                        # –ï—Å–ª–∏ API –±–∏–ª–ª–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                        logger.warning("API –±–∏–ª–ª–∏–Ω–≥–∞ LangDock –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥")
                        return await get_langdock_usage_alternative()
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ LangDock API: {response.status} - {error_text}")
                        return None
            except aiohttp.ClientError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API: {e}")
                return await get_langdock_usage_alternative()
                
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API: {e}")
        return None

async def get_langdock_usage_alternative():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã."""
    try:
        headers = {"Authorization": f"Bearer {LANGDOCK_API_KEY}", "Content-Type": "application/json"}
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        potential_endpoints = [
            "https://api.langdock.com/account/v1/usage",
            "https://api.langdock.com/v1/dashboard/usage",
            "https://api.langdock.com/eu/v1/usage"
        ]
        
        for endpoint in potential_endpoints:
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(endpoint, headers=headers, timeout=API_TIMEOUT) as response:
                        if response.status == 200:
                            usage_data = await response.json()
                            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç {endpoint}: {usage_data}")
                            return usage_data
            except Exception:
                continue
                
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return None
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {e}")
        return None

if __name__ == "__main__":
    main()
